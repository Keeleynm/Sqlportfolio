CREATE TABLE appleStore_description_combined AS

SELECT * FROM appleStore_description1

UNION ALL

SELECT * FROM appleStore_description2

UNION ALL

SELECT * FROM appleStore_description3

UNION ALL 

SELECT * FROM appleStore_description4

/* Check the number of unique apps in both tables */

SELECT COUNT(DISTINCT id) AS UniqueAppIds 
FROM AppleStore

SELECT COUNT(DISTINCT id) AS UniqueAppIds 
FROM appleStore_description_combined

/* Check for missing values in key fields */

SELECT COUNT(*) AS MissingValues 
FROM AppleStore 
WHERE track_name is NULL OR user_rating IS NULL OR prime_genre IS NULL

SELECT COUNT(*) AS MissingValues 
FROM appleStore_description_combined 
WHERE app_desc IS NULL

/* Show the number of apps per genre */

SELECT prime_genre, COUNT(*) AS NumberOfApps
FROM AppleStore
GROUP BY prime_genre
ORDER BY NumberOfApps DESC 

/* Get an overview of the apps' ratings */

SELECT min(user_rating) AS MinRating,
	   max(user_rating) AS MaxRating,
       avg(user_rating) AS AvgRating
FROM AppleStore

/* How many of the apps are free */

SELECT COUNt(*) AS FreeApps
FROM AppleStore
WHERE price = 0

/* What is the highest app price? */

SELECT max(price) AS MaxPrice
FROM AppleStore

/* Determine if paid apps have higher ratings than free apps */

SELECT CASE
			WHEN price > 0 Then 'paid'
            ELSE 'free'
       END AS app_type, 
       avg(user_rating) AS avg_rating
FROM AppleStore
GROUP BY app_type

/* Do apps with more supported languages have higher ratings? */

SELECT CASE
			WHEN lang_num < 10 THEN '<10_languages'
            WHEN lang_num BETWEEN 10 AND 30 THEN '10-30_languages'
            ELSE '>30_languages'
       END AS language_roundup,
       avg(user_rating) AS avg_rating
FROM AppleStore
GROUP BY language_roundup
ORDER BY avg_rating DESC

/* Display genres with low ratings */

SELECT prime_genre,
       avg(user_rating) AS avg_rating
FROM AppleStore
GROUP BY prime_genre
ORDER BY avg_rating ASC
LIMIT 10

/* Is there a correlation between app description length and user rating? */

SELECT CASE
			WHEN length(b.app_desc) <500 THEN 'short'
            WHEN length(b.app_desc) BETWEEN 500 AND 1000 THEN 'medium'
            ELSE 'long'
       END AS description_length_roundup,
       avg(user_rating) AS avg_rating

FROM 
	AppleStore AS A
JOIN appleStore_description_combined AS B

ON 
	a.id = b.id
    
GROUP BY description_length_roundup

ORDER BY avg_rating DESC

/* Display top-rated apps for each genre */

SELECT
	prime_genre,
    track_name,
    user_rating
FROM (
  	  SELECT
  	  prime_genre,
      track_name,
      user_rating,
      RANK () OVER(PARTITION BY prime_genre ORDER BY user_rating DESC, rating_count_tot DESC) AS rank
      FROM AppleStore
   ) AS A
WHERE 
A.rank = 1
